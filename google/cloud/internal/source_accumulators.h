// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_INTERNAL_SOURCE_ACCUMULATORS_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_INTERNAL_SOURCE_ACCUMULATORS_H

#include "google/cloud/future.h"
#include "google/cloud/internal/source_ready_token.h"
#include "google/cloud/version.h"
#include "absl/meta/type_traits.h"
#include "absl/types/variant.h"
#include <vector>

namespace google {
namespace cloud {
inline namespace GOOGLE_CLOUD_CPP_NS {
namespace internal {

/**
 * Accumulate all the values generated by a source into a `std::vector`.
 *
 * This is mostly used for testing, it uses the background threads to Accumulate
 * values, returning a `future<>` which is satisfied when the source is closed.
 *
 * The returned future is of type `future<variant<vector<T>, E>>` where `T` and
 * `E` are the value type and error type in the original source. The returned
 * future is satisfied with an error if the original source is closed with an
 * error.
 *
 * @tparam Source the type of the source.
 */
template <typename Source>
class AccumulateAllEvents {
 public:
  using source_t = absl::decay_t<Source>;
  using value_t = typename source_t::value_type;
  using error_t = typename source_t::error_type;
  using source_event_t = absl::variant<value_t, error_t>;
  using event_t = absl::variant<std::vector<typename Source::value_type>,
                                typename Source::error_type>;

  explicit AccumulateAllEvents(Source s) : source_(std::move(s)) {}

  /**
   * Start accumulating data in the background.
   *
   * The caller is responsible for ensuring this object's lifetime is long
   * enough.
   */
  future<event_t> Start() {
    promise<event_t> done;
    auto f = done.get_future();
    Schedule(std::move(done));
    return f;
  }

 private:
  void Schedule(promise<event_t> done) {
    // Simulate extended lambda captures, we want to move @p done.
    struct OnReady {
      AccumulateAllEvents* self;
      promise<event_t> done;
      void operator()(future<ReadyToken> f) {
        self->OnReady(f.get(), std::move(done));
      }
    };
    source_.ready().then(OnReady{this, std::move(done)});
  }

  void OnReady(ReadyToken token, promise<event_t> done) {
    // Simulate extended lambda captures, we want to move @p done.
    struct OnNext {
      AccumulateAllEvents* self;
      promise<event_t> done;
      void operator()(future<source_event_t> f) {
        self->OnNext(f.get(), std::move(done));
      }
    };
    source_.next(std::move(token)).then(OnNext{this, std::move(done)});
  }

  void OnNext(source_event_t v, promise<event_t> done) {
    struct Visitor {
      AccumulateAllEvents* self;
      promise<event_t> done;

      void operator()(value_t v) {
        self->results_.push_back(v);
        self->Schedule(std::move(done));
      }
      void operator()(error_t s) {
        if (s.ok()) {
          done.set_value(std::move(self->results_));
        } else {
          done.set_value(std::move(s));
        }
      }
    };
    absl::visit(Visitor{this, std::move(done)}, v);
  }

  Source source_;
  std::vector<value_t> results_;
};

}  // namespace internal
}  // namespace GOOGLE_CLOUD_CPP_NS
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_INTERNAL_SOURCE_ACCUMULATORS_H
