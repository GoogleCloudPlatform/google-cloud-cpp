// AUTOGENERATED BY tools/convert_acceptance_tests.py; DO NOT EDIT MANUALLY.
// ALL MANUAL CHANGES WILL BE OVERWRITTEN.
//
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Test name: "invalid - no commit"
TEST_F(AcceptanceTest, InvalidNoCommit) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFM"
      commitRow: "False"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "invalid - no cell key before commit"
TEST_F(AcceptanceTest, InvalidNoCellKeyBeforeCommit) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "invalid - no cell key before value"
TEST_F(AcceptanceTest, InvalidNoCellKeyBeforeValue) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      timestampMicros: "100"
      value: "dmFsdWUtVkFM"
      commitRow: "False"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "invalid - new col family must specify qualifier"
TEST_F(AcceptanceTest, InvalidNewColFamilyMustSpecifyQualifier) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "99"
      value: "dmFsdWUtVkFMXzE="
      commitRow: "False"
        )chunk",
      R"chunk(
      familyName: "B"
      timestampMicros: "98"
      value: "dmFsdWUtVkFMXzI="
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "bare commit implies ts=0"
TEST_F(AcceptanceTest, BareCommitImpliesTs) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFM"
      commitRow: "False"
        )chunk",
      R"chunk(
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 100\n"
      "value: value-VAL\n"

      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "simple row with timestamp"
TEST_F(AcceptanceTest, SimpleRowWithTimestamp) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFM"
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 100\n"
      "value: value-VAL\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "missing timestamp, implied ts=0"
TEST_F(AcceptanceTest, MissingTimestampImpliedTs) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      value: "dmFsdWUtVkFM"
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"
      "value: value-VAL\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "empty cell value"
TEST_F(AcceptanceTest, EmptyCellValue) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "two unsplit cells"
TEST_F(AcceptanceTest, TwoUnsplitCells) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "99"
      value: "dmFsdWUtVkFMXzE="
      commitRow: "False"
        )chunk",
      R"chunk(
      timestampMicros: "98"
      value: "dmFsdWUtVkFMXzI="
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 99\n"
      "value: value-VAL_1\n"

      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 98\n"
      "value: value-VAL_2\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "two qualifiers"
TEST_F(AcceptanceTest, TwoQualifiers) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "99"
      value: "dmFsdWUtVkFMXzE="
      commitRow: "False"
        )chunk",
      R"chunk(
      qualifier: "RA=="
      timestampMicros: "98"
      value: "dmFsdWUtVkFMXzI="
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 99\n"
      "value: value-VAL_1\n"

      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: D\n"
      "timestampMicros: 98\n"
      "value: value-VAL_2\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "two families"
TEST_F(AcceptanceTest, TwoFamilies) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "99"
      value: "dmFsdWUtVkFMXzE="
      commitRow: "False"
        )chunk",
      R"chunk(
      familyName: "B"
      qualifier: "RQ=="
      timestampMicros: "98"
      value: "dmFsdWUtVkFMXzI="
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 99\n"
      "value: value-VAL_1\n"

      "rowKey: RK\n"
      "familyName: B\n"
      "qualifier: E\n"
      "timestampMicros: 98\n"
      "value: value-VAL_2\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "with labels"
TEST_F(AcceptanceTest, WithLabels) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "99"
      value: "dmFsdWUtVkFMXzE="
      commitRow: "False"
        )chunk",
      R"chunk(
      timestampMicros: "98"
      value: "dmFsdWUtVkFMXzI="
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 99\n"
      "value: value-VAL_1\n"
      "label: L_1,\n"

      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 98\n"
      "value: value-VAL_2\n"
      "label: L_2,\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "split cell, bare commit"
TEST_F(AcceptanceTest, SplitCellBareCommit) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dg=="
      commitRow: "False"
        )chunk",
      R"chunk(
      value: "YWx1ZS1WQUw="
      commitRow: "False"
        )chunk",
      R"chunk(
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 100\n"
      "value: value-VAL\n"

      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "split cell"
TEST_F(AcceptanceTest, SplitCell) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dg=="
      commitRow: "False"
        )chunk",
      R"chunk(
      value: "YWx1ZS1WQUw="
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 100\n"
      "value: value-VAL\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "split four ways"
TEST_F(AcceptanceTest, SplitFourWays) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dg=="
      commitRow: "False"
        )chunk",
      R"chunk(
      value: "YQ=="
      commitRow: "False"
        )chunk",
      R"chunk(
      value: "bA=="
      commitRow: "False"
        )chunk",
      R"chunk(
      value: "dWUtVkFM"
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 100\n"
      "value: value-VAL\n"
      "label: L,\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "two split cells"
TEST_F(AcceptanceTest, TwoSplitCells) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "99"
      value: "dg=="
      commitRow: "False"
        )chunk",
      R"chunk(
      value: "YWx1ZS1WQUxfMQ=="
      commitRow: "False"
        )chunk",
      R"chunk(
      timestampMicros: "98"
      value: "dg=="
      commitRow: "False"
        )chunk",
      R"chunk(
      value: "YWx1ZS1WQUxfMg=="
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 99\n"
      "value: value-VAL_1\n"

      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 98\n"
      "value: value-VAL_2\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "multi-qualifier splits"
TEST_F(AcceptanceTest, MultiqualifierSplits) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "99"
      value: "dg=="
      commitRow: "False"
        )chunk",
      R"chunk(
      value: "YWx1ZS1WQUxfMQ=="
      commitRow: "False"
        )chunk",
      R"chunk(
      qualifier: "RA=="
      timestampMicros: "98"
      value: "dg=="
      commitRow: "False"
        )chunk",
      R"chunk(
      value: "YWx1ZS1WQUxfMg=="
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 99\n"
      "value: value-VAL_1\n"

      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: D\n"
      "timestampMicros: 98\n"
      "value: value-VAL_2\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "multi-qualifier multi-split"
TEST_F(AcceptanceTest, MultiqualifierMultisplit) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "99"
      value: "dg=="
      commitRow: "False"
        )chunk",
      R"chunk(
      value: "YQ=="
      commitRow: "False"
        )chunk",
      R"chunk(
      value: "bHVlLVZBTF8x"
      commitRow: "False"
        )chunk",
      R"chunk(
      qualifier: "RA=="
      timestampMicros: "98"
      value: "dg=="
      commitRow: "False"
        )chunk",
      R"chunk(
      value: "YQ=="
      commitRow: "False"
        )chunk",
      R"chunk(
      value: "bHVlLVZBTF8y"
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 99\n"
      "value: value-VAL_1\n"

      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: D\n"
      "timestampMicros: 98\n"
      "value: value-VAL_2\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "multi-family split"
TEST_F(AcceptanceTest, MultifamilySplit) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "99"
      value: "dg=="
      commitRow: "False"
        )chunk",
      R"chunk(
      value: "YWx1ZS1WQUxfMQ=="
      commitRow: "False"
        )chunk",
      R"chunk(
      familyName: "B"
      qualifier: "RQ=="
      timestampMicros: "98"
      value: "dg=="
      commitRow: "False"
        )chunk",
      R"chunk(
      value: "YWx1ZS1WQUxfMg=="
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 99\n"
      "value: value-VAL_1\n"

      "rowKey: RK\n"
      "familyName: B\n"
      "qualifier: E\n"
      "timestampMicros: 98\n"
      "value: value-VAL_2\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "invalid - no commit between rows"
TEST_F(AcceptanceTest, InvalidNoCommitBetweenRows) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "UktfMQ=="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFM"
      commitRow: "False"
        )chunk",
      R"chunk(
      rowKey: "UktfMg=="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFM"
      commitRow: "False"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "invalid - no commit after first row"
TEST_F(AcceptanceTest, InvalidNoCommitAfterFirstRow) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "UktfMQ=="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFM"
      commitRow: "False"
        )chunk",
      R"chunk(
      rowKey: "UktfMg=="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFM"
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "invalid - last row missing commit"
TEST_F(AcceptanceTest, InvalidLastRowMissingCommit) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "UktfMQ=="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFM"
      commitRow: "True"
        )chunk",
      R"chunk(
      rowKey: "UktfMg=="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFM"
      commitRow: "False"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK_1\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 100\n"
      "value: value-VAL\n"

  };
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "invalid - duplicate row key"
TEST_F(AcceptanceTest, InvalidDuplicateRowKey) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "UktfMQ=="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFM"
      commitRow: "True"
        )chunk",
      R"chunk(
      rowKey: "UktfMQ=="
      familyName: "B"
      qualifier: "RA=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFM"
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK_1\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 100\n"
      "value: value-VAL\n"

  };
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "invalid - new row missing row key"
TEST_F(AcceptanceTest, InvalidNewRowMissingRowKey) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "UktfMQ=="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFM"
      commitRow: "True"
        )chunk",
      R"chunk(
      timestampMicros: "100"
      value: "dmFsdWUtVkFM"
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK_1\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 100\n"
      "value: value-VAL\n"

  };
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "two rows"
TEST_F(AcceptanceTest, TwoRows) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "UktfMQ=="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFM"
      commitRow: "True"
        )chunk",
      R"chunk(
      rowKey: "UktfMg=="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFM"
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK_1\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 100\n"
      "value: value-VAL\n"

      "rowKey: RK_2\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 100\n"
      "value: value-VAL\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "two rows implicit timestamp"
TEST_F(AcceptanceTest, TwoRowsImplicitTimestamp) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "UktfMQ=="
      familyName: "A"
      qualifier: "Qw=="
      value: "dmFsdWUtVkFM"
      commitRow: "True"
        )chunk",
      R"chunk(
      rowKey: "UktfMg=="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFM"
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK_1\n"
      "familyName: A\n"
      "qualifier: C\n"
      "value: value-VAL\n"

      "rowKey: RK_2\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 100\n"
      "value: value-VAL\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "two rows empty value"
TEST_F(AcceptanceTest, TwoRowsEmptyValue) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "UktfMQ=="
      familyName: "A"
      qualifier: "Qw=="
      commitRow: "True"
        )chunk",
      R"chunk(
      rowKey: "UktfMg=="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFM"
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK_1\n"
      "familyName: A\n"
      "qualifier: C\n"

      "rowKey: RK_2\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 100\n"
      "value: value-VAL\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "two rows, one with multiple cells"
TEST_F(AcceptanceTest, TwoRowsOneWithMultipleCells) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "UktfMQ=="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "99"
      value: "dmFsdWUtVkFMXzE="
      commitRow: "False"
        )chunk",
      R"chunk(
      timestampMicros: "98"
      value: "dmFsdWUtVkFMXzI="
      commitRow: "True"
        )chunk",
      R"chunk(
      rowKey: "UktfMg=="
      familyName: "B"
      qualifier: "RA=="
      timestampMicros: "97"
      value: "dmFsdWUtVkFMXzM="
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK_1\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 99\n"
      "value: value-VAL_1\n"

      "rowKey: RK_1\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 98\n"
      "value: value-VAL_2\n"

      "rowKey: RK_2\n"
      "familyName: B\n"
      "qualifier: D\n"
      "timestampMicros: 97\n"
      "value: value-VAL_3\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "two rows, multiple cells"
TEST_F(AcceptanceTest, TwoRowsMultipleCells) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "UktfMQ=="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "99"
      value: "dmFsdWUtVkFMXzE="
      commitRow: "False"
        )chunk",
      R"chunk(
      qualifier: "RA=="
      timestampMicros: "98"
      value: "dmFsdWUtVkFMXzI="
      commitRow: "True"
        )chunk",
      R"chunk(
      rowKey: "UktfMg=="
      familyName: "B"
      qualifier: "RQ=="
      timestampMicros: "97"
      value: "dmFsdWUtVkFMXzM="
      commitRow: "False"
        )chunk",
      R"chunk(
      qualifier: "Rg=="
      timestampMicros: "96"
      value: "dmFsdWUtVkFMXzQ="
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK_1\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 99\n"
      "value: value-VAL_1\n"

      "rowKey: RK_1\n"
      "familyName: A\n"
      "qualifier: D\n"
      "timestampMicros: 98\n"
      "value: value-VAL_2\n"

      "rowKey: RK_2\n"
      "familyName: B\n"
      "qualifier: E\n"
      "timestampMicros: 97\n"
      "value: value-VAL_3\n"

      "rowKey: RK_2\n"
      "familyName: B\n"
      "qualifier: F\n"
      "timestampMicros: 96\n"
      "value: value-VAL_4\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "two rows, multiple cells, multiple families"
TEST_F(AcceptanceTest, TwoRowsMultipleCellsMultipleFamilies) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "UktfMQ=="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "99"
      value: "dmFsdWUtVkFMXzE="
      commitRow: "False"
        )chunk",
      R"chunk(
      familyName: "B"
      qualifier: "RQ=="
      timestampMicros: "98"
      value: "dmFsdWUtVkFMXzI="
      commitRow: "True"
        )chunk",
      R"chunk(
      rowKey: "UktfMg=="
      familyName: "M"
      qualifier: "Tw=="
      timestampMicros: "97"
      value: "dmFsdWUtVkFMXzM="
      commitRow: "False"
        )chunk",
      R"chunk(
      familyName: "N"
      qualifier: "UA=="
      timestampMicros: "96"
      value: "dmFsdWUtVkFMXzQ="
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK_1\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 99\n"
      "value: value-VAL_1\n"

      "rowKey: RK_1\n"
      "familyName: B\n"
      "qualifier: E\n"
      "timestampMicros: 98\n"
      "value: value-VAL_2\n"

      "rowKey: RK_2\n"
      "familyName: M\n"
      "qualifier: O\n"
      "timestampMicros: 97\n"
      "value: value-VAL_3\n"

      "rowKey: RK_2\n"
      "familyName: N\n"
      "qualifier: P\n"
      "timestampMicros: 96\n"
      "value: value-VAL_4\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "two rows, four cells, 2 labels"
TEST_F(AcceptanceTest, TwoRowsFourCellsLabels) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "UktfMQ=="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "99"
      value: "dmFsdWUtVkFMXzE="
      commitRow: "False"
        )chunk",
      R"chunk(
      timestampMicros: "98"
      value: "dmFsdWUtVkFMXzI="
      commitRow: "True"
        )chunk",
      R"chunk(
      rowKey: "UktfMg=="
      familyName: "B"
      qualifier: "RA=="
      timestampMicros: "97"
      value: "dmFsdWUtVkFMXzM="
      commitRow: "False"
        )chunk",
      R"chunk(
      timestampMicros: "96"
      value: "dmFsdWUtVkFMXzQ="
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK_1\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 99\n"
      "value: value-VAL_1\n"
      "label: L_1,\n"

      "rowKey: RK_1\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 98\n"
      "value: value-VAL_2\n"

      "rowKey: RK_2\n"
      "familyName: B\n"
      "qualifier: D\n"
      "timestampMicros: 97\n"
      "value: value-VAL_3\n"
      "label: L_3,\n"

      "rowKey: RK_2\n"
      "familyName: B\n"
      "qualifier: D\n"
      "timestampMicros: 96\n"
      "value: value-VAL_4\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "two rows with splits, same timestamp"
TEST_F(AcceptanceTest, TwoRowsWithSplitsSameTimestamp) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "UktfMQ=="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dg=="
      commitRow: "False"
        )chunk",
      R"chunk(
      value: "YWx1ZS1WQUxfMQ=="
      commitRow: "True"
        )chunk",
      R"chunk(
      rowKey: "UktfMg=="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dg=="
      commitRow: "False"
        )chunk",
      R"chunk(
      value: "YWx1ZS1WQUxfMg=="
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK_1\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 100\n"
      "value: value-VAL_1\n"

      "rowKey: RK_2\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 100\n"
      "value: value-VAL_2\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "invalid - bare reset"
TEST_F(AcceptanceTest, InvalidBareReset) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "invalid - bad reset, no commit"
TEST_F(AcceptanceTest, InvalidBadResetNoCommit) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
        )chunk",
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFM"
      commitRow: "False"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "invalid - missing key after reset"
TEST_F(AcceptanceTest, InvalidMissingKeyAfterReset) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFM"
      commitRow: "False"
        )chunk",
      R"chunk(
        )chunk",
      R"chunk(
      timestampMicros: "100"
      value: "dmFsdWUtVkFM"
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "no data after reset"
TEST_F(AcceptanceTest, NoDataAfterReset) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFM"
      commitRow: "False"
        )chunk",
      R"chunk(
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "simple reset"
TEST_F(AcceptanceTest, SimpleReset) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFM"
      commitRow: "False"
        )chunk",
      R"chunk(
        )chunk",
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFM"
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 100\n"
      "value: value-VAL\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "reset to new val"
TEST_F(AcceptanceTest, ResetToNewVal) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFMXzE="
      commitRow: "False"
        )chunk",
      R"chunk(
        )chunk",
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFMXzI="
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 100\n"
      "value: value-VAL_2\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "reset to new qual"
TEST_F(AcceptanceTest, ResetToNewQual) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFMXzE="
      commitRow: "False"
        )chunk",
      R"chunk(
        )chunk",
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "RA=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFMXzE="
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: D\n"
      "timestampMicros: 100\n"
      "value: value-VAL_1\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "reset with splits"
TEST_F(AcceptanceTest, ResetWithSplits) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFMXzE="
      commitRow: "False"
        )chunk",
      R"chunk(
      timestampMicros: "98"
      value: "dmFsdWUtVkFMXzI="
      commitRow: "False"
        )chunk",
      R"chunk(
        )chunk",
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFMXzI="
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 100\n"
      "value: value-VAL_2\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "reset two cells"
TEST_F(AcceptanceTest, ResetTwoCells) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFMXzE="
      commitRow: "False"
        )chunk",
      R"chunk(
        )chunk",
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFMXzI="
      commitRow: "False"
        )chunk",
      R"chunk(
      timestampMicros: "97"
      value: "dmFsdWUtVkFMXzM="
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 100\n"
      "value: value-VAL_2\n"

      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 97\n"
      "value: value-VAL_3\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "two resets"
TEST_F(AcceptanceTest, TwoResets) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFMXzE="
      commitRow: "False"
        )chunk",
      R"chunk(
        )chunk",
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFMXzI="
      commitRow: "False"
        )chunk",
      R"chunk(
        )chunk",
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFMXzM="
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 100\n"
      "value: value-VAL_3\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "reset then two cells"
TEST_F(AcceptanceTest, ResetThenTwoCells) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFMXzE="
      commitRow: "False"
        )chunk",
      R"chunk(
        )chunk",
      R"chunk(
      rowKey: "Uks="
      familyName: "B"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFMXzI="
      commitRow: "False"
        )chunk",
      R"chunk(
      qualifier: "RA=="
      timestampMicros: "97"
      value: "dmFsdWUtVkFMXzM="
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK\n"
      "familyName: B\n"
      "qualifier: C\n"
      "timestampMicros: 100\n"
      "value: value-VAL_2\n"

      "rowKey: RK\n"
      "familyName: B\n"
      "qualifier: D\n"
      "timestampMicros: 97\n"
      "value: value-VAL_3\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "reset to new row"
TEST_F(AcceptanceTest, ResetToNewRow) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "UktfMQ=="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFMXzE="
      commitRow: "False"
        )chunk",
      R"chunk(
        )chunk",
      R"chunk(
      rowKey: "UktfMg=="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFMXzI="
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK_2\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 100\n"
      "value: value-VAL_2\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "reset in between chunks"
TEST_F(AcceptanceTest, ResetInBetweenChunks) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dg=="
      commitRow: "False"
        )chunk",
      R"chunk(
      value: "YQ=="
      commitRow: "False"
        )chunk",
      R"chunk(
        )chunk",
      R"chunk(
      rowKey: "UktfMQ=="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFMXzE="
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK_1\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 100\n"
      "value: value-VAL_1\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "invalid - reset with chunk"
TEST_F(AcceptanceTest, InvalidResetWithChunk) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dg=="
      commitRow: "False"
        )chunk",
      R"chunk(
      value: "YQ=="
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "invalid - commit with chunk"
TEST_F(AcceptanceTest, InvalidCommitWithChunk) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dg=="
      commitRow: "False"
        )chunk",
      R"chunk(
      value: "YQ=="
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {};
  EXPECT_EQ(expected_cells, ExtractCells());
}

// Test name: "empty cell chunk"
TEST_F(AcceptanceTest, EmptyCellChunk) {
  std::vector<std::string> chunk_strings = {
      R"chunk(
      rowKey: "Uks="
      familyName: "A"
      qualifier: "Qw=="
      timestampMicros: "100"
      value: "dmFsdWUtVkFM"
      commitRow: "False"
        )chunk",
      R"chunk(
      commitRow: "False"
        )chunk",
      R"chunk(
      commitRow: "True"
        )chunk",
  };

  auto chunks = ConvertChunks(std::move(chunk_strings));
  ASSERT_FALSE(chunks.empty());

  EXPECT_STATUS_OK(FeedChunks(chunks));

  std::vector<std::string> expected_cells = {
      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"
      "timestampMicros: 100\n"
      "value: value-VAL\n"

      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"

      "rowKey: RK\n"
      "familyName: A\n"
      "qualifier: C\n"};
  EXPECT_EQ(expected_cells, ExtractCells());
}
