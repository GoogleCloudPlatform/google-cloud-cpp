// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/iam/v1/iam_policy.proto

#include "google/cloud/iam/iam_policy_connection.h"
#include "google/cloud/iam/iam_policy_options.h"
#include "google/cloud/iam/internal/iam_policy_option_defaults.h"
#include "google/cloud/iam/internal/iam_policy_stub_factory.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace iam {
inline namespace GOOGLE_CLOUD_CPP_GENERATED_NS {

IAMPolicyConnection::~IAMPolicyConnection() = default;

StatusOr<::google::iam::v1::Policy> IAMPolicyConnection::SetIamPolicy(
    ::google::iam::v1::SetIamPolicyRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<::google::iam::v1::Policy> IAMPolicyConnection::GetIamPolicy(
    ::google::iam::v1::GetIamPolicyRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<::google::iam::v1::TestIamPermissionsResponse>
IAMPolicyConnection::TestIamPermissions(
    ::google::iam::v1::TestIamPermissionsRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

namespace {
class IAMPolicyConnectionImpl : public IAMPolicyConnection {
 public:
  IAMPolicyConnectionImpl(std::shared_ptr<iam_internal::IAMPolicyStub> stub,
                          Options const& options)
      : stub_(std::move(stub)),
        retry_policy_prototype_(
            options.get<IAMPolicyRetryPolicyOption>()->clone()),
        backoff_policy_prototype_(
            options.get<IAMPolicyBackoffPolicyOption>()->clone()),
        idempotency_policy_(
            options.get<IAMPolicyConnectionIdempotencyPolicyOption>()
                ->clone()) {}

  ~IAMPolicyConnectionImpl() override = default;

  StatusOr<::google::iam::v1::Policy> SetIamPolicy(
      ::google::iam::v1::SetIamPolicyRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->SetIamPolicy(request),
        [this](grpc::ClientContext& context,
               ::google::iam::v1::SetIamPolicyRequest const& request) {
          return stub_->SetIamPolicy(context, request);
        },
        request, __func__);
  }

  StatusOr<::google::iam::v1::Policy> GetIamPolicy(
      ::google::iam::v1::GetIamPolicyRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetIamPolicy(request),
        [this](grpc::ClientContext& context,
               ::google::iam::v1::GetIamPolicyRequest const& request) {
          return stub_->GetIamPolicy(context, request);
        },
        request, __func__);
  }

  StatusOr<::google::iam::v1::TestIamPermissionsResponse> TestIamPermissions(
      ::google::iam::v1::TestIamPermissionsRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->TestIamPermissions(request),
        [this](grpc::ClientContext& context,
               ::google::iam::v1::TestIamPermissionsRequest const& request) {
          return stub_->TestIamPermissions(context, request);
        },
        request, __func__);
  }

 private:
  std::shared_ptr<iam_internal::IAMPolicyStub> stub_;
  std::unique_ptr<IAMPolicyRetryPolicy const> retry_policy_prototype_;
  std::unique_ptr<BackoffPolicy const> backoff_policy_prototype_;
  std::unique_ptr<IAMPolicyConnectionIdempotencyPolicy> idempotency_policy_;
};
}  // namespace

std::shared_ptr<IAMPolicyConnection> MakeIAMPolicyConnection(Options options) {
  options = iam_internal::IAMPolicyDefaultOptions(std::move(options));
  return std::make_shared<IAMPolicyConnectionImpl>(
      iam_internal::CreateDefaultIAMPolicyStub(options), options);
}

std::shared_ptr<IAMPolicyConnection> MakeIAMPolicyConnection(
    std::shared_ptr<iam_internal::IAMPolicyStub> stub, Options options) {
  options = iam_internal::IAMPolicyDefaultOptions(std::move(options));
  return std::make_shared<IAMPolicyConnectionImpl>(std::move(stub),
                                                   std::move(options));
}

}  // namespace GOOGLE_CLOUD_CPP_GENERATED_NS
}  // namespace iam
}  // namespace cloud
}  // namespace google
