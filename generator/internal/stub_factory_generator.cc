// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "generator/internal/stub_factory_generator.h"
#include "absl/memory/memory.h"
#include "absl/strings/str_cat.h"
#include "absl/strings/str_replace.h"
#include "absl/strings/str_split.h"
#include "absl/strings/strip.h"
#include "generator/internal/codegen_utils.h"
#include "generator/internal/predicate_utils.h"
#include "generator/internal/printer.h"
#include <google/api/client.pb.h>
#include <google/protobuf/descriptor.h>

namespace google {
namespace cloud {
namespace generator_internal {

StubFactoryGenerator::StubFactoryGenerator(
    google::protobuf::ServiceDescriptor const* service_descriptor,
    VarsDictionary service_vars,
    std::map<std::string, VarsDictionary> service_method_vars,
    google::protobuf::compiler::GeneratorContext* context)
    : service_descriptor_(service_descriptor),
      service_vars_(std::move(service_vars)),
      service_method_vars_(std::move(service_method_vars)),
      header_(context, service_vars_["stub_factory_header_path"]),
      cc_(context, service_vars_["stub_factory_cc_path"]) {
  SetVars();
}

Status StubFactoryGenerator::GenerateHeader() {
  header_.Print(CopyrightLicenseFileHeader());
  header_.Print(service_vars_,  // clang-format off
    "// Generated by the Codegen C++ plugin.\n"
    "// If you make any local changes, they will be lost.\n"
    "// source: $proto_file_name$\n"
    "#ifndef $stub_factory_header_include_guard$\n"
    "#define $stub_factory_header_include_guard$\n"
    "\n");
  // clang-format on

  // includes
  header_.Print(LocalInclude(service_vars_["stub_header_path"]));
  header_.Print(LocalInclude(service_vars_["logging_header_path"]));
  header_.Print(LocalInclude(service_vars_["metadata_header_path"]));
  header_.Print(LocalInclude("google/cloud/backoff_policy.h"));
  header_.Print(LocalInclude("google/cloud/connection_options.h"));
  header_.Print(LocalInclude("google/cloud/internal/retry_policy.h"));
  header_.Print(LocalInclude("google/cloud/polling_policy.h"));
  header_.Print(LocalInclude("google/cloud/status_or.h"));
  header_.Print(LocalInclude("grpcpp/security/credentials.h"));
  header_.Print(SystemInclude(absl::StrCat(
      absl::StripSuffix(service_descriptor_->file()->name(), ".proto"),
      ".grpc.pb.h")));
  header_.Print(SystemInclude("memory"));
  header_.Print(SystemInclude("string"));
  header_.Print("\n");

  // namespace openers
  auto namespaces =
      BuildNamespaces(service_vars_, NamespaceType::kInternal).value();
  for (auto const& nspace : namespaces) {
    if (absl::EndsWith(nspace, "_CLIENT_NS")) {
      header_.Print("inline namespace $namespace$ {\n", "namespace", nspace);
    } else {
      header_.Print("namespace $namespace$ {\n", "namespace", nspace);
    }
  }
  header_.Print("\n");

  // connection options
  header_.Print(  // clang-format off
    "struct ConnectionOptionsTraits {\n"
    "  static std::string default_endpoint();\n"
    "  static std::string user_agent_prefix();\n"
    "  static int default_num_channels();\n"
    "};\n\n");
  // clang-format on
  header_.Print(  // clang-format off
    "using ConnectionOptions =\n"
    "  google::cloud::ConnectionOptions<ConnectionOptionsTraits>;\n\n");
  // clang-format on

  header_.Print(
      service_vars_,  // clang-format off
    "std::shared_ptr<$stub_class_name$>\n"
    "CreateDefault$stub_class_name$(ConnectionOptions options);\n\n");
  // clang-format on

  // namespace closers
  std::reverse(namespaces.begin(), namespaces.end());
  for (auto const& nspace : namespaces) {
    header_.Print("}  // namespace $namespace$\n", "namespace", nspace);
  }
  header_.Print("\n");

  // close header guard
  header_.Print(service_vars_,  // clang-format off
    "#endif  // $stub_factory_header_include_guard$\n");
  // clang-format on
  return {};
}

Status StubFactoryGenerator::GenerateCc() {
  cc_.Print(CopyrightLicenseFileHeader());
  cc_.Print(service_vars_,  // clang-format off
    "// Generated by the Codegen C++ plugin.\n"
    "// If you make any local changes, they will be lost.\n"
    "// source: $proto_file_name$\n\n");
  // clang-format on

  // includes
  cc_.Print(LocalInclude(service_vars_["stub_factory_header_path"]));
  cc_.Print("\n");

  // namespace openers
  auto namespaces =
      BuildNamespaces(service_vars_, NamespaceType::kInternal).value();
  for (auto const& nspace : namespaces) {
    if (absl::EndsWith(nspace, "_CLIENT_NS")) cc_.Print("inline ");
    cc_.Print("namespace $namespace$ {\n", "namespace", nspace);
  }
  cc_.Print("\n");

  // factory function implementation
  cc_.Print(
      service_vars_,  // clang-format off
    "std::shared_ptr<$stub_class_name$>\n"
    "CreateDefault$stub_class_name$(ConnectionOptions options) {\n"
      "  auto channel =\n"
      "      grpc::CreateCustomChannel(options.endpoint(), "
      "options.credentials(),\n"
      "                                options.CreateChannelArguments());\n"
      "  auto service_grpc_stub = $grpc_stub_fqn$::NewStub(channel);\n"
      "  auto longrunning_grpc_stub =\n"
      "      google::longrunning::Operations::NewStub(channel);\n"
      "\n"
      "  std::shared_ptr<$stub_class_name$> stub =\n"
      "      std::make_shared<Default$stub_class_name$>(\n"
      "          std::move(service_grpc_stub), "
      "std::move(longrunning_grpc_stub));\n"
      "\n"
      "  stub = std::make_shared<$metadata_class_name$>(std::move(stub));\n"
      "\n"
      "  if (options.tracing_enabled(\"rpc\")) {\n"
      "    GCP_LOG(INFO) << \"Enabled logging for gRPC calls\";\n"
      "    stub = std::make_shared<$logging_class_name$>(std::move(stub),\n"
      "                                                  "
      "options.tracing_options());\n"
      "  }\n"
      "  return stub;\n"
      "}\n\n");
  // clang-format on

  // namespace closers
  for (auto iter = namespaces.rbegin(); iter != namespaces.rend(); ++iter) {
    cc_.Print("}  // namespace $namespace$\n", "namespace", *iter);
  }
  cc_.Print("\n");

  return {};
}

Status StubFactoryGenerator::Generate() {
  auto result = GenerateHeader();
  if (!result.ok()) return result;
  return GenerateCc();
}

void StubFactoryGenerator::SetVars() {
  service_vars_["stub_factory_header_include_guard"] = absl::StrCat(
      "GOOGLE_CLOUD_CPP_", absl::AsciiStrToUpper(absl::StrReplaceAll(
                               service_vars_["stub_factory_header_path"],
                               {{"/", "_"}, {".", "_"}})));
}

}  // namespace generator_internal
}  // namespace cloud
}  // namespace google
