// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "taq.pb.h"
#include "google/cloud/bigtable/data_client.h"
#include "google/cloud/bigtable/table.h"
#include <future>
#include <iomanip>
#include <numeric>
#include <sstream>

/**
 * @file
 *
 * This example shows how to perform a computation for a range of rows in Cloud
 * Bigtable.
 *
 * The input for this example is the table generated by `upload_taq_trades.cc`.
 * The row keys in this table are in `SYMBOL#YYYYMMDD#HHMMSSNNNNNNNNN` format,
 * and the `parsed:trade` column contains a trade as a `taq.Trade` proto.
 *
 * This example reads the data for a symbol and date combo and prints out the
 * volume weighted average price (VWAP).  As this is only a demo, and to keep
 * the code simple, we include trades that would not be included in a production
 * implementation of VWAP.
 */

int main(int argc, char* argv[]) try {
  namespace cbt = google::cloud::bigtable;

  // Make sure we have the right number of arguments.
  if (argc != 5) {
    std::string const cmd = argv[0];
    auto last_slash = std::string(argv[0]).find_last_of('/');
    std::cerr << "Usage: " << cmd.substr(last_slash + 1)
              << " <project> <instance> <symbol> <yyyymmdd>" << std::endl;
    return 1;
  }
  std::string const project_id = argv[1];
  std::string const instance_id = argv[2];
  std::string const symbol = argv[3];
  std::string const yyyymmdd = argv[4];

  cbt::ClientOptions options;
  cbt::Table input(
      cbt::CreateDefaultDataClient(project_id, instance_id, options),
      "taq-trades");

  double px = 0;
  long qty = 0;
  std::string prefix = symbol + "#" + yyyymmdd + "#";
  using F = cbt::Filter;
  auto reader = input.ReadRows(
      cbt::RowRange::Prefix(std::move(prefix)),
      F::Chain(F::ColumnRangeClosed("parsed", "trade", "trade"), F::Latest(1)));
  for (auto const& row : reader) {
    // There should be only one cell, but it is easier to iterate over them.
    for (auto const& cell : row.cells()) {
      taq::Trade trade;
      trade.ParseFromString(cell.value());
      px += trade.trade_price() * trade.trade_volume();
      qty += trade.trade_volume();
    }
  }
  std::cout << "The VWAP for " << symbol << " on " << yyyymmdd << " is "
            << std::setprecision(4) << px / qty << ", volume=" << qty
            << std::endl;

  return 0;
} catch (std::exception const& ex) {
  std::cerr << "Standard exception raised: " << ex.what() << std::endl;
  return 1;
}
