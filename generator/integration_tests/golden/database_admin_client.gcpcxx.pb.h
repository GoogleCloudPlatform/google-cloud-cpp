// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: generator/integration_tests/test.proto
#ifndef GOOGLE_CLOUD_CPP_GENERATOR_INTEGRATION_TESTS_GOLDEN_DATABASE_ADMIN_CLIENT_GCPCXX_PB_H
#define GOOGLE_CLOUD_CPP_GENERATOR_INTEGRATION_TESTS_GOLDEN_DATABASE_ADMIN_CLIENT_GCPCXX_PB_H

#include "generator/integration_tests/golden/database_admin_connection.gcpcxx.pb.h"
#include "google/cloud/future.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <google/longrunning/operations.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace golden {
inline namespace GOOGLE_CLOUD_CPP_NS {

class DatabaseAdminClient {
 public:
  explicit DatabaseAdminClient(ConnectionOptions const& options = ConnectionOptions());
  explicit DatabaseAdminClient(std::shared_ptr<DatabaseAdminConnection> connection);
  ~DatabaseAdminClient();

  ListDatabasesRange
  ListDatabases(std::string const& parent);

  future<StatusOr<::google::test::admin::database::v1::Database>>
  CreateDatabase(std::string const& parent, std::string const& create_statement);

  StatusOr<::google::test::admin::database::v1::Database>
  GetDatabase(std::string const& name);

  future<StatusOr<::google::test::admin::database::v1::UpdateDatabaseDdlMetadata>>
  UpdateDatabaseDdl(std::string const& database, std::vector<std::string> const& statements);

  Status
  DropDatabase(std::string const& database);

  StatusOr<::google::test::admin::database::v1::GetDatabaseDdlResponse>
  GetDatabaseDdl(std::string const& database);

  StatusOr<::google::iam::v1::Policy>
  SetIamPolicy(std::string const& resource, ::google::iam::v1::Policy const& policy);

  StatusOr<::google::iam::v1::Policy>
  GetIamPolicy(std::string const& resource);

  StatusOr<::google::iam::v1::TestIamPermissionsResponse>
  TestIamPermissions(std::string const& resource, std::vector<std::string> const& permissions);

  future<StatusOr<::google::test::admin::database::v1::Backup>>
  CreateBackup(std::string const& parent, ::google::test::admin::database::v1::Backup const& backup, std::string const& backup_id);

  StatusOr<::google::test::admin::database::v1::Backup>
  GetBackup(std::string const& name);

  StatusOr<::google::test::admin::database::v1::Backup>
  UpdateBackup(::google::test::admin::database::v1::Backup const& backup, ::google::protobuf::FieldMask const& update_mask);

  Status
  DeleteBackup(std::string const& name);

  ListBackupsRange
  ListBackups(std::string const& parent);

  future<StatusOr<::google::test::admin::database::v1::Database>>
  RestoreDatabase(std::string const& parent, std::string const& database_id, std::string const& backup);

  ListDatabaseOperationsRange
  ListDatabaseOperations(std::string const& parent);

  ListBackupOperationsRange
  ListBackupOperations(std::string const& parent);

  ListDatabasesRange
  ListDatabases(::google::test::admin::database::v1::ListDatabasesRequest request);

  future<StatusOr<::google::test::admin::database::v1::Database>>
  CreateDatabase(::google::test::admin::database::v1::CreateDatabaseRequest const& request);

  StatusOr<::google::test::admin::database::v1::Database>
  GetDatabase(::google::test::admin::database::v1::GetDatabaseRequest const& request);

  future<StatusOr<::google::test::admin::database::v1::UpdateDatabaseDdlMetadata>>
  UpdateDatabaseDdl(::google::test::admin::database::v1::UpdateDatabaseDdlRequest const& request);

  Status
  DropDatabase(::google::test::admin::database::v1::DropDatabaseRequest const& request);

  StatusOr<::google::test::admin::database::v1::GetDatabaseDdlResponse>
  GetDatabaseDdl(::google::test::admin::database::v1::GetDatabaseDdlRequest const& request);

  StatusOr<::google::iam::v1::Policy>
  SetIamPolicy(::google::iam::v1::SetIamPolicyRequest const& request);

  StatusOr<::google::iam::v1::Policy>
  GetIamPolicy(::google::iam::v1::GetIamPolicyRequest const& request);

  StatusOr<::google::iam::v1::TestIamPermissionsResponse>
  TestIamPermissions(::google::iam::v1::TestIamPermissionsRequest const& request);

  future<StatusOr<::google::test::admin::database::v1::Backup>>
  CreateBackup(::google::test::admin::database::v1::CreateBackupRequest const& request);

  StatusOr<::google::test::admin::database::v1::Backup>
  GetBackup(::google::test::admin::database::v1::GetBackupRequest const& request);

  StatusOr<::google::test::admin::database::v1::Backup>
  UpdateBackup(::google::test::admin::database::v1::UpdateBackupRequest const& request);

  Status
  DeleteBackup(::google::test::admin::database::v1::DeleteBackupRequest const& request);

  ListBackupsRange
  ListBackups(::google::test::admin::database::v1::ListBackupsRequest request);

  future<StatusOr<::google::test::admin::database::v1::Database>>
  RestoreDatabase(::google::test::admin::database::v1::RestoreDatabaseRequest const& request);

  ListDatabaseOperationsRange
  ListDatabaseOperations(::google::test::admin::database::v1::ListDatabaseOperationsRequest request);

  ListBackupOperationsRange
  ListBackupOperations(::google::test::admin::database::v1::ListBackupOperationsRequest request);

 private:
  std::shared_ptr<DatabaseAdminConnection> connection_;
};

}  // namespace GOOGLE_CLOUD_CPP_NS
}  // namespace golden
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GENERATOR_INTEGRATION_TESTS_GOLDEN_DATABASE_ADMIN_CLIENT_GCPCXX_PB_H
